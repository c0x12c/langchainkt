package langchainkt.model.chat

import langchainkt.agent.tool.ToolSpecification
import langchainkt.data.message.AiMessage
import langchainkt.data.message.ChatMessage
import langchainkt.data.message.UserMessage
import langchainkt.model.output.Response

/**
 * Represents a language model that has a chat interface.
 */
interface ChatLanguageModel {
  /**
   * Generates a response from the model based on a message from a user.
   * This is a convenience method that receives the message from a user as a String
   * and returns only the generated response.
   *
   * @param message The message from the user.
   * @return The response generated by the model.
   */
  fun generate(message: String): String? {
    return generate(UserMessage.from(message)).content().text()
  }

  /**
   * Generates a response from the model based on a sequence of messages.
   * Typically, the sequence contains messages in the following order:
   * System (optional) - User - AI - User - AI - User ...
   *
   * @param messages An array of messages.
   * @return The response generated by the model.
   */
  fun generate(vararg messages: ChatMessage): Response<AiMessage> {
    return generate(listOf(*messages))
  }

  /**
   * Generates a response from the model based on a sequence of messages.
   * Typically, the sequence contains messages in the following order:
   * System (optional) - User - AI - User - AI - User ...
   *
   * @param messages A list of messages.
   * @return The response generated by the model.
   */
  fun generate(messages: List<ChatMessage>): Response<AiMessage>

  /**
   * Generates a response from the model based on a list of messages and a list of tool specifications.
   * The response may either be a text message or a request to execute one of the specified tools.
   * Typically, the list contains messages in the following order:
   * System (optional) - User - AI - User - AI - User ...
   *
   * @param messages           A list of messages.
   * @param toolSpecifications A list of tools that the model is allowed to execute.
   * The model autonomously decides whether to use any of these tools.
   * @return The response generated by the model.
   * [AiMessage] can contain either a textual response or a request to execute one of the tools.
   */
  fun generate(messages: List<ChatMessage>, toolSpecifications: List<ToolSpecification>): Response<AiMessage>

  /**
   * Generates a response from the model based on a list of messages and a single tool specification.
   * The model is forced to execute the specified tool.
   * Typically, the list contains messages in the following order:
   * System (optional) - User - AI - User - AI - User ...
   *
   * @param messages          A list of messages.
   * @param toolSpecification The specification of a tool that must be executed.
   * The model is forced to execute this tool.
   * @return The response generated by the model.
   * [AiMessage] contains a request to execute the specified tool.
   */
  fun generate(messages: List<ChatMessage>, toolSpecification: ToolSpecification): Response<AiMessage>
}
